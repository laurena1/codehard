{"changed":true,"filter":false,"title":"app.js","tooltip":"/app.js","value":"","undoManager":{"mark":15,"position":19,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":88}},"text":"var express = require ('express');//we have to put this to create an express application"},{"action":"insertText","range":{"start":{"row":0,"column":88},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":135,"column":0}},"lines":["var http = require('http');","var url = require(\"url\");","var mongoose = require('mongoose');","var studentSchema = require('./student_schema.js').studentSchema;","var jade = require(\"jade\");","var bodyParser = require('body-parser');","","var app = express();//we have to put this to create an express application","","","app.use(bodyParser.urlencoded({extended: true}));","//authentication for user login","var basicAuth = require('basic-auth-connect');","app.use(basicAuth(function(user, pass)","{","    return (user === 'pilot' && pass === \"aviator\");","}));","//The first step of implimenting the template engine is to define a default template engine for the Express app. We do this by setting the view engine setting on the express() applicaton object. We also need to set the views setting to the location where our template files will be stored. ","app.set('views', './views');//here we are setting the ./views directory as teh root for the template documents. ","app.set('view engine', 'jade');//here jade is set as the view engine                        ","app.engine('jade', jade.__express);//We need to register teh template engines for the template extensions that we want them to handle by using the app.engine(ext, callback) method. The ext parameter is the file extension used for the template files, and the callback parameter is a function that supports Express's rendering functionality.","","var connString = \"mongodb://\" + process.env.IP + \":27017/\";","var dbName = \"studentsdb\";","","mongoose.connect(connString + dbName);","var Students = mongoose.model('students', studentSchema);","","http.createServer(app).listen(process.env.PORT);","","app.on('close', function() {","    console.log(\"Closed\");","    mongoose.disconnect();","});","","//Here we use a simple get route that handles the /path","//app.get(path, [middleware,...], callback). The callback parameter is the requests handler that should handle the request and send the response back to the client. The callback parameter should accept a Request object as athe first parameter and Response object as the second.","app.get('/', function(req, res) {   ","    var output = \"\\n\";","    output += \"\";","    res.send('This is our home page to view our list of students add an extension to the url: show, ');","});","","//show all students in list","app.get(['/list/'], function(req, res) {","    var search = Students.find();//this searches the query of the db finds all students ","    search.exec(function(err, docs) {//this executes and runs the query","    res.render('list.jade', {result: docs});//docs are stored in an array called docs and docs is rendered using the create.jade template","    });","});","","app.get('/students/bylast', function(req, res) ","{","    var url_parts = url.parse(req.url, true);//parsing the url (breaking it apart) to get last name ","    var query = url_parts.query;","    var search = Students.find({'last': query.last});//running the query looking for just the last name","    search.exec(function(err, docs) ","    {","    res.render('delete.jade', {result: docs[0]});//array because we wnat it to jsut show the one last name we queried for and just showing the first element","    });","});","","app.post('/deletestudents/', function(req, res) ","{","    var last = req.body.last;//when we hit delete this is whats called and last name is stored in a variable called last","    Students.findOne({","        last: last ","    }, function(err, doc) {","        doc.remove();//removes the student document","    });","    res.redirect('./list');//redirect goes back up top to shows and runs show.jade again.","});","","app.post('/update/', function(req, res)","{","var fname = req.body.first;","var lname = req.body.last;","var maj = req.body.major;","var h1 = req.body.homework1;","var h2 = req.body.homework2;","var h3 = req.body.homework3;","","Students.findOne({","    last: lname },","    function(err, doc) {","        doc.first = fname;","        doc.last = lname;","        doc.major = maj;","        doc.grades.homework1 = h1;","        doc.grades.homework2 = h2;","        doc.grades.homework3 = h3;","        doc.save();","        res.redirect('./list');","    });","","});","","","","app.get('/createNewStudent/', function(req, res)","{","    res.render('create.jade');//this should render the form ","});","","app.post('/newStudent/', function(req, res)","{","    //saves all the info from the form","var fname = req.body.first;","var lname = req.body.last;","var maj = req.body.major;","var h1 = req.body.homework1;","var h2 = req.body.homework2;","var h3 = req.body.homework3;","","setTimeout(function()","{","    var createNewStudent = ","    {","        first: fname,","        last: lname,","        major: maj,","        grades: {","           homework1: h1,","           homework2: h2,","           homework3: h3","        }","        ","    };","    Students.create([createNewStudent]), function(err)","    {","        res.redirect('./list');","    };","    ","}, 5000);"]},{"action":"insertText","range":{"start":{"row":135,"column":0},"end":{"row":135,"column":3}},"text":"});"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":135,"column":0},"end":{"row":135,"column":3}},"text":"});"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":135,"column":0}},"nl":"\n","lines":["var express = require ('express');//we have to put this to create an express application","var http = require('http');","var url = require(\"url\");","var mongoose = require('mongoose');","var studentSchema = require('./student_schema.js').studentSchema;","var jade = require(\"jade\");","var bodyParser = require('body-parser');","","var app = express();//we have to put this to create an express application","","","app.use(bodyParser.urlencoded({extended: true}));","//authentication for user login","var basicAuth = require('basic-auth-connect');","app.use(basicAuth(function(user, pass)","{","    return (user === 'pilot' && pass === \"aviator\");","}));","//The first step of implimenting the template engine is to define a default template engine for the Express app. We do this by setting the view engine setting on the express() applicaton object. We also need to set the views setting to the location where our template files will be stored. ","app.set('views', './views');//here we are setting the ./views directory as teh root for the template documents. ","app.set('view engine', 'jade');//here jade is set as the view engine                        ","app.engine('jade', jade.__express);//We need to register teh template engines for the template extensions that we want them to handle by using the app.engine(ext, callback) method. The ext parameter is the file extension used for the template files, and the callback parameter is a function that supports Express's rendering functionality.","","var connString = \"mongodb://\" + process.env.IP + \":27017/\";","var dbName = \"studentsdb\";","","mongoose.connect(connString + dbName);","var Students = mongoose.model('students', studentSchema);","","http.createServer(app).listen(process.env.PORT);","","app.on('close', function() {","    console.log(\"Closed\");","    mongoose.disconnect();","});","","//Here we use a simple get route that handles the /path","//app.get(path, [middleware,...], callback). The callback parameter is the requests handler that should handle the request and send the response back to the client. The callback parameter should accept a Request object as athe first parameter and Response object as the second.","app.get('/', function(req, res) {   ","    var output = \"\\n\";","    output += \"\";","    res.send('This is our home page to view our list of students add an extension to the url: show, ');","});","","//show all students in list","app.get(['/list/'], function(req, res) {","    var search = Students.find();//this searches the query of the db finds all students ","    search.exec(function(err, docs) {//this executes and runs the query","    res.render('list.jade', {result: docs});//docs are stored in an array called docs and docs is rendered using the create.jade template","    });","});","","app.get('/students/bylast', function(req, res) ","{","    var url_parts = url.parse(req.url, true);//parsing the url (breaking it apart) to get last name ","    var query = url_parts.query;","    var search = Students.find({'last': query.last});//running the query looking for just the last name","    search.exec(function(err, docs) ","    {","    res.render('delete.jade', {result: docs[0]});//array because we wnat it to jsut show the one last name we queried for and just showing the first element","    });","});","","app.post('/deletestudents/', function(req, res) ","{","    var last = req.body.last;//when we hit delete this is whats called and last name is stored in a variable called last","    Students.findOne({","        last: last ","    }, function(err, doc) {","        doc.remove();//removes the student document","    });","    res.redirect('./list');//redirect goes back up top to shows and runs show.jade again.","});","","app.post('/update/', function(req, res)","{","var fname = req.body.first;","var lname = req.body.last;","var maj = req.body.major;","var h1 = req.body.homework1;","var h2 = req.body.homework2;","var h3 = req.body.homework3;","","Students.findOne({","    last: lname },","    function(err, doc) {","        doc.first = fname;","        doc.last = lname;","        doc.major = maj;","        doc.grades.homework1 = h1;","        doc.grades.homework2 = h2;","        doc.grades.homework3 = h3;","        doc.save();","        res.redirect('./list');","    });","","});","","","","app.get('/createNewStudent/', function(req, res)","{","    res.render('create.jade');//this should render the form ","});","","app.post('/newStudent/', function(req, res)","{","    //saves all the info from the form","var fname = req.body.first;","var lname = req.body.last;","var maj = req.body.major;","var h1 = req.body.homework1;","var h2 = req.body.homework2;","var h3 = req.body.homework3;","","setTimeout(function()","{","    var createNewStudent = ","    {","        first: fname,","        last: lname,","        major: maj,","        grades: {","           homework1: h1,","           homework2: h2,","           homework3: h3","        }","        ","    };","    Students.create([createNewStudent]), function(err)","    {","        res.redirect('./list');","    };","    ","}, 5000);"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":88}},"text":"var express = require ('express');//we have to put this to create an express application"},{"action":"insertText","range":{"start":{"row":0,"column":88},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":11,"column":0}},"lines":["var http = require('http');//we have to add this because we are starting an HTTP server","var url = require(\"url\");","var mongoose = require('mongoose');","var studentSchema = require('./student_schema.js').studentSchema;","var jade = require(\"jade\");","var bodyParser = require('body-parser');","","var app = express();//we have to put this to create an express application","",""]},{"action":"insertText","range":{"start":{"row":11,"column":0},"end":{"row":11,"column":49}},"text":"app.use(bodyParser.urlencoded({extended: true}));"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":49},"end":{"row":12,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":13,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":13,"column":0},"end":{"row":14,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":14,"column":0},"end":{"row":14,"column":112}},"text":"app.set('views', './views');//here we are setting the ./views directory as teh root for the template documents. "},{"action":"insertText","range":{"start":{"row":14,"column":112},"end":{"row":15,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":15,"column":0},"end":{"row":39,"column":0}},"lines":["app.set('view engine', 'jade');//here jade is set as the view engine                        ","app.engine('jade', jade.__express);//We need to register teh template engines for the template extensions that we want them to handle by using the app.engine(ext, callback) method. The ext parameter is the file extension used for the template files, and the callback parameter is a function that supports Express's rendering functionality.","","var connString = \"mongodb://\" + process.env.IP + \":27017/\";","var dbName = \"studentsdb\";","","mongoose.connect(connString + dbName);","var Students = mongoose.model('students', studentSchema);","","","//to start the HTTP server, you need to first create a Server object, using the createServer() method. This method retunrs the Server object. The optional requestListner parameter is a callback that is executed when the request event is triggered. The callback should accept two parameters. The first is an IncomingMessage object repreenting the client request, and the second is a ServerResponse object you use to formulate and send the response. Once we create the server object we can begin listening on it by calling the listen() method on the server object.","http.createServer(app).listen(process.env.PORT);","","app.on('close', function() {","    console.log(\"Closed\");","    mongoose.disconnect();","});","","//Here we use a simple get route that handles the /path","//app.get(path, [middleware,...], callback). The callback parameter is the requests handler that should handle the request and send the response back to the client. The callback parameter should accept a Request object as athe first parameter and Response object as the second.","app.get('/', function(req, res) {   ","    var output = \"\\n\";","    output += \"\";","    res.send('This is our home page to view our list of students add an extension to the url: show, ');"]},{"action":"insertText","range":{"start":{"row":39,"column":0},"end":{"row":39,"column":3}},"text":"});"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":99},"end":{"row":38,"column":100}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":98},"end":{"row":38,"column":99}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":97},"end":{"row":38,"column":98}},"text":"w"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":96},"end":{"row":38,"column":97}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":95},"end":{"row":38,"column":96}},"text":"h"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":94},"end":{"row":38,"column":95}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":93},"end":{"row":38,"column":94}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":92},"end":{"row":38,"column":93}},"text":":"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":38,"column":92},"end":{"row":38,"column":93}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":39,"column":3},"end":{"row":40,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":40,"column":0},"end":{"row":41,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":41,"column":0},"end":{"row":41,"column":27}},"text":"//show all students in list"},{"action":"insertText","range":{"start":{"row":41,"column":27},"end":{"row":42,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":42,"column":0},"end":{"row":47,"column":0}},"lines":["app.get(['/list/'], function(req, res) {","    var search = Students.find();//this searches the query of the db finds all students ","    search.exec(function(err, docs) {//this executes and runs the query","    res.render('list.jade', {result: docs});//docs are stored in an array called docs and docs is rendered using the create.jade template","    });"]},{"action":"insertText","range":{"start":{"row":47,"column":0},"end":{"row":47,"column":3}},"text":"});"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":47,"column":0},"end":{"row":47,"column":3}},"text":"});"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":47,"column":0}},"nl":"\n","lines":["var express = require ('express');//we have to put this to create an express application","var http = require('http');//we have to add this because we are starting an HTTP server","var url = require(\"url\");","var mongoose = require('mongoose');","var studentSchema = require('./student_schema.js').studentSchema;","var jade = require(\"jade\");","var bodyParser = require('body-parser');","","var app = express();//we have to put this to create an express application","","","app.use(bodyParser.urlencoded({extended: true}));","","","app.set('views', './views');//here we are setting the ./views directory as teh root for the template documents. ","app.set('view engine', 'jade');//here jade is set as the view engine                        ","app.engine('jade', jade.__express);//We need to register teh template engines for the template extensions that we want them to handle by using the app.engine(ext, callback) method. The ext parameter is the file extension used for the template files, and the callback parameter is a function that supports Express's rendering functionality.","","var connString = \"mongodb://\" + process.env.IP + \":27017/\";","var dbName = \"studentsdb\";","","mongoose.connect(connString + dbName);","var Students = mongoose.model('students', studentSchema);","","","//to start the HTTP server, you need to first create a Server object, using the createServer() method. This method retunrs the Server object. The optional requestListner parameter is a callback that is executed when the request event is triggered. The callback should accept two parameters. The first is an IncomingMessage object repreenting the client request, and the second is a ServerResponse object you use to formulate and send the response. Once we create the server object we can begin listening on it by calling the listen() method on the server object.","http.createServer(app).listen(process.env.PORT);","","app.on('close', function() {","    console.log(\"Closed\");","    mongoose.disconnect();","});","","//Here we use a simple get route that handles the /path","//app.get(path, [middleware,...], callback). The callback parameter is the requests handler that should handle the request and send the response back to the client. The callback parameter should accept a Request object as athe first parameter and Response object as the second.","app.get('/', function(req, res) {   ","    var output = \"\\n\";","    output += \"\";","    res.send('This is our home page to view our list of students add an extension to the url.');","});","","//show all students in list","app.get(['/list/'], function(req, res) {","    var search = Students.find();//this searches the query of the db finds all students ","    search.exec(function(err, docs) {//this executes and runs the query","    res.render('list.jade', {result: docs});//docs are stored in an array called docs and docs is rendered using the create.jade template","    });"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1415643984098}