{"filter":false,"title":"comments_model.js","tooltip":"/models/comments_model.js","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":34,"column":53},"action":"insert","lines":["/*  The idea of comments is to nest one type of document - a comment - within","    another document - a page.  This leaves us with two choices:","    Faced with two choices:","    - store the comments within a single document","    - store comments as seperate documents","    ","    This mongoose model takes the approach where a CommentThread document","    keeps track of Reply documents.  Notice that we have an array of ","    ReplySchema in each document type.  This means that comments can be","    nested.","    ","    As you consider this example for your own work, you won't have to nest","    as this example does.","*/","var mongoose = require('mongoose'),","    Schema = mongoose.Schema;","var ReplySchema = new Schema({","    username: String,","    subject: String,","    timestamp: {","        type: Date,","        default: Date.now","    },","    body: String,","    replies: [ReplySchema]","}, {","    _id: true","});","var CommentThreadSchema = new Schema({","    title: String,","    replies: [ReplySchema]","});","//create both models in mongoose","mongoose.model('Reply', ReplySchema);","mongoose.model('CommentThread', CommentThreadSchema);"]}]}]]},"ace":{"folds":[],"scrolltop":32,"scrollleft":0,"selection":{"start":{"row":34,"column":53},"end":{"row":34,"column":53},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":1,"state":"comment_regex_allowed","mode":"ace/mode/javascript"}},"timestamp":1416778696582,"hash":"aaf2124ce5e78a12bc687ab429f10b812759cb75"}